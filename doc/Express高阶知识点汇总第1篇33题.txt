express高阶知识点汇总第1篇高阶33题

[express-cli篇]--Express脚手架generator快速搭建项目
1、安装express-generator，安装命令：
npm install express-generator -g


2、搭建项目，创建基本文件。命令：
express 项目名称


3、进入项目，补齐依赖
cd 项目名称
npm install

完成搭建。


4、express项目目录结构解析
项目目录
├── bin             项目启动文件
├── node_modules    项目依赖文件
├── public          静态资源
├── routes          路由文件
├── views           模板
├── app.js          主文件（入口文件）
├── package.json    项目说明文件(所有依赖的名称)


5、启动项目命令
npm start

浏览器输入localhost://3000访问即可
经测试，访问是ok的。


6、端口修改
打开bin目录下的www文件，找到
var port = normalizePort(process.env.PORT || '3000');
将3000修改为想要使用的端口号


7、入口文件app.js详解
var createError = require('http-errors'); // 加载处理错误的中间件
var express = require('express');
var path = require('path'); // 引入内置处理路径模块
var cookieParser = require('cookie-parser'); // 加载处理cookie中间件
var logger = require('morgan'); // 引入日志打印插件 

var indexRouter = require('./routes/index'); // 引入主路由接口
var usersRouter = require('./routes/users'); // 引入用户路由接口

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views')); // 指定访问views时的视图文件目录
app.set('view engine', 'jade'); // 模板引擎使用jade模板

app.use(logger('dev')); // 设置开发模式打印日志
app.use(express.json()); // 中间件解析req.body
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser()); // 处理cookie
app.use(express.static(path.join(__dirname, 'public'))); // 指定静态文件目录

app.use('/', indexRouter); // 注册主路由接口
app.use('/users', usersRouter);  // 注册用户路由接口

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;


8、使用中间件dotenv来启用环境变量配置文件
step1、首先定义config.env:
NODE_ENV=development
PORT=5000

step2、在app.js里面引入中间件，并config()--path:--配置环境变量
const dotenv = require('dotenv');

dotenv.config({ // 注册环境变量配置
  path: './config/config.env'
});

www.js中调用
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

server.listen(port, () => {
  console.log(`服务启动成功端口${process.env.PORT}`)
});



